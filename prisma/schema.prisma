// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Almacen {
  id        Int     @id @default(autoincrement())
  telefono  String
  linea1    String
  linea2    String?
  pais      String
  estado    String
  ciudad    String
  codpostal String

  // Relaciones
  origenEnvios  Envio[]   @relation("OrigenAlmacen")
  destinoEnvios Envio[]   @relation("DestinoAlmacen")
  paquetes      Paquete[]
}

model Usuario {
  id         Int    @id @default(autoincrement())
  cedula     String @unique
  email      String @unique
  p_nombre   String
  s_nombre   String?
  p_apellido String
  s_apellido String?
  telefono   String
  password   String
  rol        String

  // Relaciones
  enviosCliente  Envio[]   @relation("ClienteEnvio")
  enviosEmpleado Envio[]   @relation("EmpleadoEnvio")
  facturas       Factura[]
  paquetes       Paquete[]
}

model Envio {
  numero       Int       @id
  tipo         String
  estado       String
  fechasalida  DateTime
  fechallegada DateTime?

  origenCodigo  Int
  destinoCodigo Int
  EmpleadoId    Int
  clienteId     Int
  paquetes      Paquete[]

  // Relaciones
  origen   Almacen  @relation("OrigenAlmacen", fields: [origenCodigo], references: [id])
  destino  Almacen  @relation("DestinoAlmacen", fields: [destinoCodigo], references: [id])
  empleado Usuario  @relation("EmpleadoEnvio", fields: [EmpleadoId], references: [id])
  cliente  Usuario  @relation("ClienteEnvio", fields: [clienteId], references: [id])
  factura  Factura? @relation("EnvioFactura")
}

model Factura {
  numero         Int              @id @default(autoincrement())
  estado         Boolean
  pdf            String?
  metodoPago     String
  monto          Float
  cantidadPiezas Int
  envioNumero    Int              @unique
  clienteId      Int
  detalles       DetalleFactura[]

  // Relaciones
  envio   Envio   @relation("EnvioFactura", fields: [envioNumero], references: [numero])
  cliente Usuario @relation(fields: [clienteId], references: [id])
}

model DetalleFactura {
  idFactura Int
  numero    Int   @default(autoincrement())
  monto     Float
  idPaquete Int

  paquete Paquete @relation(fields: [idPaquete], references: [id])
  factura Factura @relation(fields: [idFactura], references: [numero])

  @@id([idFactura, numero])
}

model Paquete {
  id            Int    @id @default(autoincrement())
  descripcion   String
  largo         Float
  ancho         Float
  alto          Float
  peso          Float
  volumen       Float
  almacenCodigo Int
  empleadoId    Int
  envioNumero   Int?

  // Relaciones
  almacen  Almacen          @relation(fields: [almacenCodigo], references: [id])
  empleado Usuario          @relation(fields: [empleadoId], references: [id])
  envio    Envio?           @relation(fields: [envioNumero], references: [numero])
  detalles DetalleFactura[]
}
