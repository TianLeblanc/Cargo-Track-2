// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             Int      @id @default(autoincrement())
  cedula         String   @unique
  nombre         String
  apellido       String
  email          String  @unique
  telefono       String
  contrasena     String
  rol            String
  paquetes       Paquete[]
  enviosEmpleado Envio[]    @relation("EmpleadoEnvio")
  enviosCliente  Envio[]    @relation("ClienteEnvio")
  facturas       Factura[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Almacen {
  codigo        Int      @id @default(autoincrement())
  telefono      String
  linea1        String
  linea2        String?
  pais          String
  estado        String
  ciudad        String
  codigoPostal  String
  paquetes      Paquete[]
  enviosOrigen  Envio[]  @relation("OrigenAlmacen")
  enviosDestino Envio[] @relation("DestinoAlmacen")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Paquete {
  tracking      Int      @id @default(autoincrement())
  descripcion   String
  largo         Float
  ancho         Float
  alto          Float
  peso          Float
  volumen       Float
  almacenCodigo Int
  empleadoId    Int
  envioNumero   Int?
  
  almacen       Almacen  @relation(fields: [almacenCodigo], references: [codigo])
  empleado      Usuario  @relation(fields: [empleadoId], references: [id])
  envio         Envio?   @relation(fields: [envioNumero], references: [numero])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Envio {
  numero        Int       @id @default(autoincrement())
  tipo          String
  estado        String
  fechaSalida   DateTime
  fechaLlegada  DateTime?
  origenCodigo  Int
  destinoCodigo Int
  empleadoId    Int
  clienteId     Int
  paquetes      Paquete[]

  origen        Almacen   @relation("OrigenAlmacen", fields: [origenCodigo], references: [codigo])
  destino       Almacen   @relation("DestinoAlmacen", fields: [destinoCodigo], references: [codigo])
  empleado      Usuario   @relation("EmpleadoEnvio", fields: [empleadoId], references: [id])
  cliente       Usuario   @relation("ClienteEnvio", fields: [clienteId], references: [id])
  facturas      Factura[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Factura {
  numero          Int             @id @default(autoincrement())
  estado          Boolean
  pdf             String?
  metodoPago      String
  monto           Float
  cantidadPiezas  Int
  envioNumero     Int
  clienteId       Int
  detalles        DetalleFactura[]
  

  envio            Envio          @relation(fields: [envioNumero], references: [numero])
  clienteUsuario   Usuario        @relation(fields: [clienteId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model DetalleFactura {
  facturaNumero   Int
  numero          Int
  // falta 'codigoPaquete' y 'cant'
  montoCalculado  Float
  descripcion     String?

  factura       Factura        @relation(fields: [facturaNumero], references: [numero])
  
  @@id([facturaNumero, numero])
  @@index([facturaNumero])
}